module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateApplication {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateContact {
  count: Int!
}

type AggregateJobPosting {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application {
  id: ID!
  applied: Boolean!
  user: User!
  jobPosting: JobPosting!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  id: ID
  applied: Boolean
  user: UserCreateOneWithoutApplicationsInput!
  jobPosting: JobPostingCreateOneInput!
}

input ApplicationCreateManyWithoutUserInput {
  create: [ApplicationCreateWithoutUserInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutUserInput {
  id: ID
  applied: Boolean
  jobPosting: JobPostingCreateOneInput!
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  applied_ASC
  applied_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ApplicationPreviousValues {
  id: ID!
  applied: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  applied: Boolean
  applied_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateInput {
  applied: Boolean
  user: UserUpdateOneRequiredWithoutApplicationsInput
  jobPosting: JobPostingUpdateOneRequiredInput
}

input ApplicationUpdateManyDataInput {
  applied: Boolean
}

input ApplicationUpdateManyMutationInput {
  applied: Boolean
}

input ApplicationUpdateManyWithoutUserInput {
  create: [ApplicationCreateWithoutUserInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  updateMany: [ApplicationUpdateManyWithWhereNestedInput!]
}

input ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyDataInput!
}

input ApplicationUpdateWithoutUserDataInput {
  applied: Boolean
  jobPosting: JobPostingUpdateOneRequiredInput
}

input ApplicationUpdateWithWhereUniqueWithoutUserInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutUserDataInput!
}

input ApplicationUpsertWithWhereUniqueWithoutUserInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutUserDataInput!
  create: ApplicationCreateWithoutUserInput!
}

input ApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  applied: Boolean
  applied_not: Boolean
  user: UserWhereInput
  jobPosting: JobPostingWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Company {
  id: ID!
  name: String!
  address: String
  phoneNumber: String
  website: String
  employees(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  jobPostings(where: JobPostingWhereInput, orderBy: JobPostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobPosting!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  name: String!
  address: String
  phoneNumber: String
  website: String
  employees: ContactCreateManyWithoutCompanyInput
  jobPostings: JobPostingCreateManyWithoutCompanyInput
}

input CompanyCreateOneWithoutEmployeesInput {
  create: CompanyCreateWithoutEmployeesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutJobPostingsInput {
  create: CompanyCreateWithoutJobPostingsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutEmployeesInput {
  id: ID
  name: String!
  address: String
  phoneNumber: String
  website: String
  jobPostings: JobPostingCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutJobPostingsInput {
  id: ID
  name: String!
  address: String
  phoneNumber: String
  website: String
  employees: ContactCreateManyWithoutCompanyInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  website_ASC
  website_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  address: String
  phoneNumber: String
  website: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  name: String
  address: String
  phoneNumber: String
  website: String
  employees: ContactUpdateManyWithoutCompanyInput
  jobPostings: JobPostingUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  name: String
  address: String
  phoneNumber: String
  website: String
}

input CompanyUpdateOneRequiredWithoutJobPostingsInput {
  create: CompanyCreateWithoutJobPostingsInput
  update: CompanyUpdateWithoutJobPostingsDataInput
  upsert: CompanyUpsertWithoutJobPostingsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutEmployeesInput {
  create: CompanyCreateWithoutEmployeesInput
  update: CompanyUpdateWithoutEmployeesDataInput
  upsert: CompanyUpsertWithoutEmployeesInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutEmployeesDataInput {
  name: String
  address: String
  phoneNumber: String
  website: String
  jobPostings: JobPostingUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutJobPostingsDataInput {
  name: String
  address: String
  phoneNumber: String
  website: String
  employees: ContactUpdateManyWithoutCompanyInput
}

input CompanyUpsertWithoutEmployeesInput {
  update: CompanyUpdateWithoutEmployeesDataInput!
  create: CompanyCreateWithoutEmployeesInput!
}

input CompanyUpsertWithoutJobPostingsInput {
  update: CompanyUpdateWithoutJobPostingsDataInput!
  create: CompanyCreateWithoutJobPostingsInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  employees_every: ContactWhereInput
  employees_some: ContactWhereInput
  employees_none: ContactWhereInput
  jobPostings_every: JobPostingWhereInput
  jobPostings_some: JobPostingWhereInput
  jobPostings_none: JobPostingWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}

type Contact {
  id: ID!
  name: String!
  email: String
  phoneNumber: String
  jobTitle: String
  user: User!
  company: Company
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContactConnection {
  pageInfo: PageInfo!
  edges: [ContactEdge]!
  aggregate: AggregateContact!
}

input ContactCreateInput {
  id: ID
  name: String!
  email: String
  phoneNumber: String
  jobTitle: String
  user: UserCreateOneWithoutContactsInput!
  company: CompanyCreateOneWithoutEmployeesInput
}

input ContactCreateManyWithoutCompanyInput {
  create: [ContactCreateWithoutCompanyInput!]
  connect: [ContactWhereUniqueInput!]
}

input ContactCreateManyWithoutUserInput {
  create: [ContactCreateWithoutUserInput!]
  connect: [ContactWhereUniqueInput!]
}

input ContactCreateWithoutCompanyInput {
  id: ID
  name: String!
  email: String
  phoneNumber: String
  jobTitle: String
  user: UserCreateOneWithoutContactsInput!
}

input ContactCreateWithoutUserInput {
  id: ID
  name: String!
  email: String
  phoneNumber: String
  jobTitle: String
  company: CompanyCreateOneWithoutEmployeesInput
}

type ContactEdge {
  node: Contact!
  cursor: String!
}

enum ContactOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  jobTitle_ASC
  jobTitle_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContactPreviousValues {
  id: ID!
  name: String!
  email: String
  phoneNumber: String
  jobTitle: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ContactScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  jobTitle: String
  jobTitle_not: String
  jobTitle_in: [String!]
  jobTitle_not_in: [String!]
  jobTitle_lt: String
  jobTitle_lte: String
  jobTitle_gt: String
  jobTitle_gte: String
  jobTitle_contains: String
  jobTitle_not_contains: String
  jobTitle_starts_with: String
  jobTitle_not_starts_with: String
  jobTitle_ends_with: String
  jobTitle_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ContactScalarWhereInput!]
  OR: [ContactScalarWhereInput!]
  NOT: [ContactScalarWhereInput!]
}

type ContactSubscriptionPayload {
  mutation: MutationType!
  node: Contact
  updatedFields: [String!]
  previousValues: ContactPreviousValues
}

input ContactSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactWhereInput
  AND: [ContactSubscriptionWhereInput!]
  OR: [ContactSubscriptionWhereInput!]
  NOT: [ContactSubscriptionWhereInput!]
}

input ContactUpdateInput {
  name: String
  email: String
  phoneNumber: String
  jobTitle: String
  user: UserUpdateOneRequiredWithoutContactsInput
  company: CompanyUpdateOneWithoutEmployeesInput
}

input ContactUpdateManyDataInput {
  name: String
  email: String
  phoneNumber: String
  jobTitle: String
}

input ContactUpdateManyMutationInput {
  name: String
  email: String
  phoneNumber: String
  jobTitle: String
}

input ContactUpdateManyWithoutCompanyInput {
  create: [ContactCreateWithoutCompanyInput!]
  delete: [ContactWhereUniqueInput!]
  connect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  disconnect: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [ContactUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [ContactScalarWhereInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
}

input ContactUpdateManyWithoutUserInput {
  create: [ContactCreateWithoutUserInput!]
  delete: [ContactWhereUniqueInput!]
  connect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  disconnect: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ContactUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ContactScalarWhereInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
}

input ContactUpdateManyWithWhereNestedInput {
  where: ContactScalarWhereInput!
  data: ContactUpdateManyDataInput!
}

input ContactUpdateWithoutCompanyDataInput {
  name: String
  email: String
  phoneNumber: String
  jobTitle: String
  user: UserUpdateOneRequiredWithoutContactsInput
}

input ContactUpdateWithoutUserDataInput {
  name: String
  email: String
  phoneNumber: String
  jobTitle: String
  company: CompanyUpdateOneWithoutEmployeesInput
}

input ContactUpdateWithWhereUniqueWithoutCompanyInput {
  where: ContactWhereUniqueInput!
  data: ContactUpdateWithoutCompanyDataInput!
}

input ContactUpdateWithWhereUniqueWithoutUserInput {
  where: ContactWhereUniqueInput!
  data: ContactUpdateWithoutUserDataInput!
}

input ContactUpsertWithWhereUniqueWithoutCompanyInput {
  where: ContactWhereUniqueInput!
  update: ContactUpdateWithoutCompanyDataInput!
  create: ContactCreateWithoutCompanyInput!
}

input ContactUpsertWithWhereUniqueWithoutUserInput {
  where: ContactWhereUniqueInput!
  update: ContactUpdateWithoutUserDataInput!
  create: ContactCreateWithoutUserInput!
}

input ContactWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  jobTitle: String
  jobTitle_not: String
  jobTitle_in: [String!]
  jobTitle_not_in: [String!]
  jobTitle_lt: String
  jobTitle_lte: String
  jobTitle_gt: String
  jobTitle_gte: String
  jobTitle_contains: String
  jobTitle_not_contains: String
  jobTitle_starts_with: String
  jobTitle_not_starts_with: String
  jobTitle_ends_with: String
  jobTitle_not_ends_with: String
  user: UserWhereInput
  company: CompanyWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
}

input ContactWhereUniqueInput {
  id: ID
}

scalar DateTime

enum GenderOptions {
  MALE
  FEMALE
  OTHER
}

type JobPosting {
  id: ID!
  title: String!
  company: Company!
  link: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type JobPostingConnection {
  pageInfo: PageInfo!
  edges: [JobPostingEdge]!
  aggregate: AggregateJobPosting!
}

input JobPostingCreateInput {
  id: ID
  title: String!
  company: CompanyCreateOneWithoutJobPostingsInput!
  link: String!
}

input JobPostingCreateManyWithoutCompanyInput {
  create: [JobPostingCreateWithoutCompanyInput!]
  connect: [JobPostingWhereUniqueInput!]
}

input JobPostingCreateOneInput {
  create: JobPostingCreateInput
  connect: JobPostingWhereUniqueInput
}

input JobPostingCreateWithoutCompanyInput {
  id: ID
  title: String!
  link: String!
}

type JobPostingEdge {
  node: JobPosting!
  cursor: String!
}

enum JobPostingOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  link_ASC
  link_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type JobPostingPreviousValues {
  id: ID!
  title: String!
  link: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input JobPostingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [JobPostingScalarWhereInput!]
  OR: [JobPostingScalarWhereInput!]
  NOT: [JobPostingScalarWhereInput!]
}

type JobPostingSubscriptionPayload {
  mutation: MutationType!
  node: JobPosting
  updatedFields: [String!]
  previousValues: JobPostingPreviousValues
}

input JobPostingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobPostingWhereInput
  AND: [JobPostingSubscriptionWhereInput!]
  OR: [JobPostingSubscriptionWhereInput!]
  NOT: [JobPostingSubscriptionWhereInput!]
}

input JobPostingUpdateDataInput {
  title: String
  company: CompanyUpdateOneRequiredWithoutJobPostingsInput
  link: String
}

input JobPostingUpdateInput {
  title: String
  company: CompanyUpdateOneRequiredWithoutJobPostingsInput
  link: String
}

input JobPostingUpdateManyDataInput {
  title: String
  link: String
}

input JobPostingUpdateManyMutationInput {
  title: String
  link: String
}

input JobPostingUpdateManyWithoutCompanyInput {
  create: [JobPostingCreateWithoutCompanyInput!]
  delete: [JobPostingWhereUniqueInput!]
  connect: [JobPostingWhereUniqueInput!]
  set: [JobPostingWhereUniqueInput!]
  disconnect: [JobPostingWhereUniqueInput!]
  update: [JobPostingUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [JobPostingUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [JobPostingScalarWhereInput!]
  updateMany: [JobPostingUpdateManyWithWhereNestedInput!]
}

input JobPostingUpdateManyWithWhereNestedInput {
  where: JobPostingScalarWhereInput!
  data: JobPostingUpdateManyDataInput!
}

input JobPostingUpdateOneRequiredInput {
  create: JobPostingCreateInput
  update: JobPostingUpdateDataInput
  upsert: JobPostingUpsertNestedInput
  connect: JobPostingWhereUniqueInput
}

input JobPostingUpdateWithoutCompanyDataInput {
  title: String
  link: String
}

input JobPostingUpdateWithWhereUniqueWithoutCompanyInput {
  where: JobPostingWhereUniqueInput!
  data: JobPostingUpdateWithoutCompanyDataInput!
}

input JobPostingUpsertNestedInput {
  update: JobPostingUpdateDataInput!
  create: JobPostingCreateInput!
}

input JobPostingUpsertWithWhereUniqueWithoutCompanyInput {
  where: JobPostingWhereUniqueInput!
  update: JobPostingUpdateWithoutCompanyDataInput!
  create: JobPostingCreateWithoutCompanyInput!
}

input JobPostingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  company: CompanyWhereInput
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [JobPostingWhereInput!]
  OR: [JobPostingWhereInput!]
  NOT: [JobPostingWhereInput!]
}

input JobPostingWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  updateManyApplications(data: ApplicationUpdateManyMutationInput!, where: ApplicationWhereInput): BatchPayload!
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createContact(data: ContactCreateInput!): Contact!
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateManyContacts(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  upsertContact(where: ContactWhereUniqueInput!, create: ContactCreateInput!, update: ContactUpdateInput!): Contact!
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteManyContacts(where: ContactWhereInput): BatchPayload!
  createJobPosting(data: JobPostingCreateInput!): JobPosting!
  updateJobPosting(data: JobPostingUpdateInput!, where: JobPostingWhereUniqueInput!): JobPosting
  updateManyJobPostings(data: JobPostingUpdateManyMutationInput!, where: JobPostingWhereInput): BatchPayload!
  upsertJobPosting(where: JobPostingWhereUniqueInput!, create: JobPostingCreateInput!, update: JobPostingUpdateInput!): JobPosting!
  deleteJobPosting(where: JobPostingWhereUniqueInput!): JobPosting
  deleteManyJobPostings(where: JobPostingWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact]!
  contactsConnection(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactConnection!
  jobPosting(where: JobPostingWhereUniqueInput!): JobPosting
  jobPostings(where: JobPostingWhereInput, orderBy: JobPostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobPosting]!
  jobPostingsConnection(where: JobPostingWhereInput, orderBy: JobPostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobPostingConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  contact(where: ContactSubscriptionWhereInput): ContactSubscriptionPayload
  jobPosting(where: JobPostingSubscriptionWhereInput): JobPostingSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  bio: String
  age: Int
  gender: GenderOptions
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  bio: String
  age: Int
  gender: GenderOptions
  contacts: ContactCreateManyWithoutUserInput
  applications: ApplicationCreateManyWithoutUserInput
}

input UserCreateOneWithoutApplicationsInput {
  create: UserCreateWithoutApplicationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutContactsInput {
  create: UserCreateWithoutContactsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutApplicationsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  bio: String
  age: Int
  gender: GenderOptions
  contacts: ContactCreateManyWithoutUserInput
}

input UserCreateWithoutContactsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  bio: String
  age: Int
  gender: GenderOptions
  applications: ApplicationCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  bio_ASC
  bio_DESC
  age_ASC
  age_DESC
  gender_ASC
  gender_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  bio: String
  age: Int
  gender: GenderOptions
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  bio: String
  age: Int
  gender: GenderOptions
  contacts: ContactUpdateManyWithoutUserInput
  applications: ApplicationUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  bio: String
  age: Int
  gender: GenderOptions
}

input UserUpdateOneRequiredWithoutApplicationsInput {
  create: UserCreateWithoutApplicationsInput
  update: UserUpdateWithoutApplicationsDataInput
  upsert: UserUpsertWithoutApplicationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutContactsInput {
  create: UserCreateWithoutContactsInput
  update: UserUpdateWithoutContactsDataInput
  upsert: UserUpsertWithoutContactsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutApplicationsDataInput {
  name: String
  email: String
  password: String
  bio: String
  age: Int
  gender: GenderOptions
  contacts: ContactUpdateManyWithoutUserInput
}

input UserUpdateWithoutContactsDataInput {
  name: String
  email: String
  password: String
  bio: String
  age: Int
  gender: GenderOptions
  applications: ApplicationUpdateManyWithoutUserInput
}

input UserUpsertWithoutApplicationsInput {
  update: UserUpdateWithoutApplicationsDataInput!
  create: UserCreateWithoutApplicationsInput!
}

input UserUpsertWithoutContactsInput {
  update: UserUpdateWithoutContactsDataInput!
  create: UserCreateWithoutContactsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  gender: GenderOptions
  gender_not: GenderOptions
  gender_in: [GenderOptions!]
  gender_not_in: [GenderOptions!]
  contacts_every: ContactWhereInput
  contacts_some: ContactWhereInput
  contacts_none: ContactWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    